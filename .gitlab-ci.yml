variables:
  POSTGRES_DB: meet_your_tutor
  POSTGRES_HOST: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_INITDB_ARGS: "--auth-local=md5"
  MIX_ENV: "prod"
  APP_NAME: "meet_your_tutor"
  APP_VSN: "0.1.0"

stages:
  - init
  - test
  - publish
  - deploy_staging

.elixir_default: &elixir_default
  image: elixir:1.9.0
  before_script:
    - mix local.hex --force
    - mix local.rebar --force

elixir_compile:
  <<: *elixir_default
  stage: init
  script:
    - apt-get update
    - apt-get install -y postgresql-client
    - mix deps.get --only test
    - mix compile
  artifacts:
    paths:
      - mix.lock
      - _build
      - deps

elixir_test:
  <<: *elixir_default
  stage: test
  services:
    - postgres:latest
  script:
    - MIX_ENV=test mix ecto.create
    - MIX_ENV=test mix ecto.migrate
    # - mix test

  dependencies:
    - elixir_compile

publish:
  image: docker:19.03.0
  stage: publish
  services:
    - docker:19.03.0-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
    - docker build --build-arg APP_NAME=$APP_NAME --build-arg APP_VSN=$APP_VSN -t $CI_REGISTRY/$CI_DEPLOY_USER/$CI_PROJECT_NAME:$CI_COMMIT_SHA -f Dockerfile.prod .
    - docker push $CI_REGISTRY/$CI_DEPLOY_USER/$CI_PROJECT_NAME:$CI_COMMIT_SHA
  dependencies:
    - elixir_test

deploy_staging:
  image: docker:19.03.0
  stage: deploy_staging
  only:
    - staging
  variables:
    DOCKER_HOST: "tcp://meet-your-tutor.patrickoryono.site:2376"
    DOCKER_CERT_PATH: "certs"
    DOCKER_TLS_VERIFY: "1"
  before_script:
    - mkdir $DOCKER_CERT_PATH
    - echo "$TLSCACERT" > $DOCKER_CERT_PATH/ca.pem
    - echo "$TLSCERT" > $DOCKER_CERT_PATH/cert.pem
    - echo "$TLSKEY" > $DOCKER_CERT_PATH/key.pem
  script:
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
    - docker stack deploy --with-registry-auth -c stack.yml meet_your_tutor
  dependencies:
    - publish
